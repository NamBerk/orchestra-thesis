#
# SEEMOO - Secure Mobile Networking Lab and Project, Winter 2017/18
# author: Jan Sturm

def gf256_mul(a,b):
	res = 0
	while (a and b):
		if (b & 1):
			res ^= a
		if (a & 0x80):
			a = (a << 1) ^ 0x11b
		else:
			a <<= 1
		b >>= 1
	return res

def gf16_mul(a,b):
	res = 0
	while (a and b):
		if (b & 1):
			res ^= a
		if (a & 0x08):
			a = (a << 1) ^ 0x13
		else:
			a <<= 1
		b >>= 1
	return res

def write_hex_values(f, data):
	linebreak= 16
	f.write("\n\t\t".join([", ".join(map(hex,data[i:i+linebreak]))+"," for i in range(0, len(data), linebreak)]))

f = open('gf_precomp.h','w+')
f.truncate()
f.write('\
// AUTOGENERATED FILE WITH gf_precomp_calc.py\n\n\
#ifndef GF_PRECOMP_H_\n\
#define GF_PRECOMP_H_\n\
#include "params.h"\n\n\
#if GF == 256\n\
/*\n\
\tprimitive polynomial for GF(2^8)= x^8 + x^4 + x^3 + x^1 + 1\n\
\tsimplest generator g for GF(2^8) = x + 1 = 0x03\n\
\tantilog(i) = g^i\n\
\tlog(antilog(i)) = i\n\
*/\n'\
)


#####  GF256 #######
g=0x03
tmp=0x01
log = [0]*256
antilog = [0]*256

for i in range(255):
    log[tmp]= i
    antilog[i]=tmp
    tmp = gf256_mul(tmp,g)

f.write('const static uint8_t gf256_precomp_log[256] = {\n\t\t')
write_hex_values(f,log)
f.write('\n};\n\nconst static uint8_t gf256_precomp_antilog[256] = {\n\t\t')
write_hex_values(f,antilog)
f.write('\n};\
\n\n#elif GF == 16\n')

#####  GF16 ########
g=0x03
tmp=0x01
log = [0]*16
antilog = [0]*16

for i in range(15):
    log[tmp]= i
    antilog[i]=tmp
    tmp = gf16_mul(tmp,g)
f.write('\
/*\n\
\tprimitive polynomial for GF(2^4) = x^4 + x + 1\n\
\tgenerator g for GF(2^4) = x + 1 = 0x03\n\
\tmatlab verification code for generator:\n\
\t\t\tpkg load communications\n\
\t\t\tgf(3, 4, 0x13).^gf([1:15], 4, 0x13)\n\n\
\tantilog(i) = g^i\n\
\tlog(antilog(i)) = i\n\
*/\n'\
)
f.write('const static uint8_t gf16_precomp_log[16] = {\n\t\t')
write_hex_values(f,log)
f.write('\n};\n\nconst static uint8_t gf16_precomp_antilog[16] = {\n\t\t')
write_hex_values(f,antilog)
f.write('\n};')

f.write('\n\n#endif\n\n#endif')
f.close()
